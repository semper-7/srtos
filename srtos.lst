
srtos.elf:     file format elf32-littlearm


Disassembly of section .text:

08000130 <__strlen>:
 8000130:	f100 0201 	add.w	r2, r0, #1

08000134 <_stl0>:
 8000134:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000138:	4309      	orrs	r1, r1
 800013a:	d1fb      	bne.n	8000134 <_stl0>
 800013c:	eba0 0002 	sub.w	r0, r0, r2
 8000140:	4770      	bx	lr

08000142 <__stpcpy>:
 8000142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000146:	b112      	cbz	r2, 800014e <_stp1>
 8000148:	f800 2b01 	strb.w	r2, [r0], #1
 800014c:	e7f9      	b.n	8000142 <__stpcpy>

0800014e <_stp1>:
 800014e:	4770      	bx	lr

08000150 <__get_MSP>:
 8000150:	f3ef 8008 	mrs	r0, MSP
 8000154:	4770      	bx	lr

08000156 <__get_PSP>:
 8000156:	f3ef 8009 	mrs	r0, PSP
 800015a:	4770      	bx	lr

0800015c <__get_CONTROL>:
 800015c:	f3ef 8014 	mrs	r0, CONTROL
 8000160:	4770      	bx	lr

08000162 <__set_PSP>:
 8000162:	f380 8809 	msr	PSP, r0
 8000166:	4770      	bx	lr

08000168 <__set_CONTROL>:
 8000168:	f380 8814 	msr	CONTROL, r0
 800016c:	4770      	bx	lr

0800016e <__set_reg>:
 800016e:	2000      	movs	r0, #0
 8000170:	2101      	movs	r1, #1
 8000172:	2202      	movs	r2, #2
 8000174:	2303      	movs	r3, #3
 8000176:	f05f 0c0c 	movs.w	ip, #12
 800017a:	4770      	bx	lr

0800017c <Reset_Handler>:
 800017c:	4807      	ldr	r0, [pc, #28]	; (800019c <Reset_Handler+0x20>)
 800017e:	4685      	mov	sp, r0
 8000180:	b672      	cpsid	i
 8000182:	4807      	ldr	r0, [pc, #28]	; (80001a0 <Reset_Handler+0x24>)
 8000184:	4907      	ldr	r1, [pc, #28]	; (80001a4 <Reset_Handler+0x28>)
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <Reset_Handler+0x2c>)
 8000188:	f000 f816 	bl	80001b8 <__memcpy>
 800018c:	4807      	ldr	r0, [pc, #28]	; (80001ac <Reset_Handler+0x30>)
 800018e:	4908      	ldr	r1, [pc, #32]	; (80001b0 <Reset_Handler+0x34>)
 8000190:	f000 f81a 	bl	80001c8 <__bzero>
 8000194:	4807      	ldr	r0, [pc, #28]	; (80001b4 <Reset_Handler+0x38>)
 8000196:	4780      	blx	r0
 8000198:	f000 b898 	b.w	80002cc <main>
 800019c:	20005000 	.word	0x20005000
 80001a0:	080005d8 	.word	0x080005d8
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000170 	.word	0x20000170
 80001b0:	0000001d 	.word	0x0000001d
 80001b4:	080004cd 	.word	0x080004cd

080001b8 <__memcpy>:
 80001b8:	b12a      	cbz	r2, 80001c6 <_mcl1>

080001ba <_mcl0>:
 80001ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001be:	f801 3b01 	strb.w	r3, [r1], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	d1f9      	bne.n	80001ba <_mcl0>

080001c6 <_mcl1>:
 80001c6:	4770      	bx	lr

080001c8 <__bzero>:
 80001c8:	b129      	cbz	r1, 80001d6 <_bzr1>
 80001ca:	f04f 0200 	mov.w	r2, #0

080001ce <_bzr0>:
 80001ce:	f800 2b01 	strb.w	r2, [r0], #1
 80001d2:	3901      	subs	r1, #1
 80001d4:	d1fb      	bne.n	80001ce <_bzr0>

080001d6 <_bzr1>:
 80001d6:	4770      	bx	lr

080001d8 <ADC1_2_IRQHandler>:
 80001d8:	e7fe      	b.n	80001d8 <ADC1_2_IRQHandler>
	...

080001dc <itoa>:
#include "func.h"

char buf_ansi[11];

char* itoa(uint32_t num,uint8_t type) {
 80001dc:	b470      	push	{r4, r5, r6}
  char *s=buf_ansi+10;
  *(s)=0;
 80001de:	4d15      	ldr	r5, [pc, #84]	; (8000234 <itoa+0x58>)
#include "func.h"

char buf_ansi[11];

char* itoa(uint32_t num,uint8_t type) {
 80001e0:	4603      	mov	r3, r0
  char *s=buf_ansi+10;
  *(s)=0;
 80001e2:	4628      	mov	r0, r5
 80001e4:	2200      	movs	r2, #0
  do {
    s--;
    if(--type>128) {
      *(s)=(uint8_t)(num%10 + 0x30);
 80001e6:	4e14      	ldr	r6, [pc, #80]	; (8000238 <itoa+0x5c>)

char buf_ansi[11];

char* itoa(uint32_t num,uint8_t type) {
  char *s=buf_ansi+10;
  *(s)=0;
 80001e8:	f800 2f0a 	strb.w	r2, [r0, #10]!
  do {
    s--;
    if(--type>128) {
 80001ec:	3901      	subs	r1, #1
 80001ee:	b2c9      	uxtb	r1, r1
      *(s)=(uint8_t)(num%10 + 0x30);
      num/=10;
    } else {
      int n=(num&0xf)+0x30;
 80001f0:	f003 040f 	and.w	r4, r3, #15
char* itoa(uint32_t num,uint8_t type) {
  char *s=buf_ansi+10;
  *(s)=0;
  do {
    s--;
    if(--type>128) {
 80001f4:	2980      	cmp	r1, #128	; 0x80
      *(s)=(uint8_t)(num%10 + 0x30);
      num/=10;
    } else {
      int n=(num&0xf)+0x30;
 80001f6:	f104 0230 	add.w	r2, r4, #48	; 0x30

char* itoa(uint32_t num,uint8_t type) {
  char *s=buf_ansi+10;
  *(s)=0;
  do {
    s--;
 80001fa:	f100 30ff 	add.w	r0, r0, #4294967295
    if(--type>128) {
 80001fe:	d90e      	bls.n	800021e <itoa+0x42>
      *(s)=(uint8_t)(num%10 + 0x30);
 8000200:	fba6 4203 	umull	r4, r2, r6, r3
 8000204:	08d2      	lsrs	r2, r2, #3
 8000206:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800020a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800020e:	3330      	adds	r3, #48	; 0x30
 8000210:	7003      	strb	r3, [r0, #0]
      num/=10;
 8000212:	4613      	mov	r3, r2
      int n=(num&0xf)+0x30;
      if(n>0x39) n+=7; 
      num>>=4;
      *(s)=n;
    }
  } while(type && (type<11 || num) && s!=buf_ansi);
 8000214:	b10b      	cbz	r3, 800021a <itoa+0x3e>
 8000216:	42a8      	cmp	r0, r5
 8000218:	d1e8      	bne.n	80001ec <itoa+0x10>
  return s;
}
 800021a:	bc70      	pop	{r4, r5, r6}
 800021c:	4770      	bx	lr
    if(--type>128) {
      *(s)=(uint8_t)(num%10 + 0x30);
      num/=10;
    } else {
      int n=(num&0xf)+0x30;
      if(n>0x39) n+=7; 
 800021e:	2a39      	cmp	r2, #57	; 0x39
 8000220:	bf88      	it	hi
 8000222:	f104 0237 	addhi.w	r2, r4, #55	; 0x37
      num>>=4;
      *(s)=n;
 8000226:	7002      	strb	r2, [r0, #0]
      *(s)=(uint8_t)(num%10 + 0x30);
      num/=10;
    } else {
      int n=(num&0xf)+0x30;
      if(n>0x39) n+=7; 
      num>>=4;
 8000228:	091b      	lsrs	r3, r3, #4
      *(s)=n;
    }
  } while(type && (type<11 || num) && s!=buf_ansi);
 800022a:	2900      	cmp	r1, #0
 800022c:	d0f5      	beq.n	800021a <itoa+0x3e>
 800022e:	290a      	cmp	r1, #10
 8000230:	d9f1      	bls.n	8000216 <itoa+0x3a>
 8000232:	e7ef      	b.n	8000214 <itoa+0x38>
 8000234:	20000000 	.word	0x20000000
 8000238:	cccccccd 	.word	0xcccccccd

0800023c <togleLed>:

extern TASK task[TSK];
static int ctx;

void togleLed(void) {
  GPIOC->ODR ^= GPIO_ODR_ODR13;
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <togleLed+0x4c>)
char usart_rx_bufer[USART_RX_BUFER_SIZE];

extern TASK task[TSK];
static int ctx;

void togleLed(void) {
 800023e:	b510      	push	{r4, lr}
  GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000240:	68d3      	ldr	r3, [r2, #12]
  usartPrint(itoa(task[2].context[ctx + 8],HEX8));
 8000242:	4c12      	ldr	r4, [pc, #72]	; (800028c <togleLed+0x50>)

extern TASK task[TSK];
static int ctx;

void togleLed(void) {
  GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000244:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000248:	60d3      	str	r3, [r2, #12]
  usartPrint(itoa(task[2].context[ctx + 8],HEX8));
 800024a:	6823      	ldr	r3, [r4, #0]
 800024c:	4810      	ldr	r0, [pc, #64]	; (8000290 <togleLed+0x54>)
 800024e:	3328      	adds	r3, #40	; 0x28
 8000250:	2108      	movs	r1, #8
 8000252:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000256:	f7ff ffc1 	bl	80001dc <itoa>
 800025a:	f000 f991 	bl	8000580 <usartPrint>
  usartWrite('\t');
 800025e:	2009      	movs	r0, #9
 8000260:	f000 f964 	bl	800052c <usartWrite>
  usartPrint(itoa(ctx++,HEX));
 8000264:	6820      	ldr	r0, [r4, #0]
 8000266:	2110      	movs	r1, #16
 8000268:	1c43      	adds	r3, r0, #1
 800026a:	6023      	str	r3, [r4, #0]
 800026c:	f7ff ffb6 	bl	80001dc <itoa>
 8000270:	f000 f986 	bl	8000580 <usartPrint>
  usartWrite('\n');
 8000274:	200a      	movs	r0, #10
 8000276:	f000 f959 	bl	800052c <usartWrite>
  if (ctx==8) ctx = 0;
 800027a:	6823      	ldr	r3, [r4, #0]
 800027c:	2b08      	cmp	r3, #8
 800027e:	bf04      	itt	eq
 8000280:	2300      	moveq	r3, #0
 8000282:	6023      	streq	r3, [r4, #0]
 8000284:	bd10      	pop	{r4, pc}
 8000286:	bf00      	nop
 8000288:	40011000 	.word	0x40011000
 800028c:	20000170 	.word	0x20000170
 8000290:	20000010 	.word	0x20000010

08000294 <scanKey>:
}

void scanKey() {
 8000294:	b508      	push	{r3, lr}
  volatile static uint32_t scan_old;
  volatile static uint32_t scan_changes;
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <scanKey+0x2c>)
  scan_changes = scan_old ^ scan;
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <scanKey+0x30>)
}

void scanKey() {
  volatile static uint32_t scan_old;
  volatile static uint32_t scan_changes;
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
 800029a:	689b      	ldr	r3, [r3, #8]
  scan_changes = scan_old ^ scan;
 800029c:	6851      	ldr	r1, [r2, #4]
}

void scanKey() {
  volatile static uint32_t scan_old;
  volatile static uint32_t scan_changes;
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
 800029e:	f003 0301 	and.w	r3, r3, #1
  scan_changes = scan_old ^ scan;
 80002a2:	4059      	eors	r1, r3
 80002a4:	6091      	str	r1, [r2, #8]
  scan_old = scan;
 80002a6:	6053      	str	r3, [r2, #4]
  if (scan_changes & ~scan) {
 80002a8:	6892      	ldr	r2, [r2, #8]
 80002aa:	ea32 0303 	bics.w	r3, r2, r3
 80002ae:	d100      	bne.n	80002b2 <scanKey+0x1e>
 80002b0:	bd08      	pop	{r3, pc}
    togleLed();
 80002b2:	f7ff ffc3 	bl	800023c <togleLed>
    usartPrint("Key\n");
  }
}
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
  scan_changes = scan_old ^ scan;
  scan_old = scan;
  if (scan_changes & ~scan) {
    togleLed();
    usartPrint("Key\n");
 80002ba:	4803      	ldr	r0, [pc, #12]	; (80002c8 <scanKey+0x34>)
 80002bc:	f000 b960 	b.w	8000580 <usartPrint>
 80002c0:	40010800 	.word	0x40010800
 80002c4:	20000170 	.word	0x20000170
 80002c8:	080005c0 	.word	0x080005c0

080002cc <main>:
  GPIOA->CRH &= ~(GPIO_CRH_CNF9   | GPIO_CRH_MODE9  |
                  GPIO_CRH_CNF10  | GPIO_CRH_MODE10);
  GPIOA->CRH |= (GPIO_CRH_CNF9    | GPIO_CRH_MODE9  |
                 GPIO_CRH_CNF10_1);
//PA:0,10 = 1
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
 80002cc:	f240 4501 	movw	r5, #1025	; 0x401
}

int main()
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
 80002d0:	4c23      	ldr	r4, [pc, #140]	; (8000360 <main+0x94>)
    usartPrint("Key\n");
  }
}

int main()
{
 80002d2:	b508      	push	{r3, lr}
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
 80002d4:	69a2      	ldr	r2, [r4, #24]
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
  
// --- GPIO setup ---
//PA:0 - KEY input pull-up
  GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <main+0x98>)
}

int main()
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
 80002d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002dc:	f042 0214 	orr.w	r2, r2, #20
 80002e0:	61a2      	str	r2, [r4, #24]
                   RCC_APB2RSTR_USART1RST) ;
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80002e2:	6962      	ldr	r2, [r4, #20]
  GPIOA->CRH |= (GPIO_CRH_CNF9    | GPIO_CRH_MODE9  |
                 GPIO_CRH_CNF10_1);
//PA:0,10 = 1
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
//PC:13 - LED
  GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
 80002e4:	4920      	ldr	r1, [pc, #128]	; (8000368 <main+0x9c>)
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
                   RCC_APB2RSTR_USART1RST) ;
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80002e6:	f042 0201 	orr.w	r2, r2, #1
 80002ea:	6162      	str	r2, [r4, #20]
  
// --- GPIO setup ---
//PA:0 - KEY input pull-up
  GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80002ec:	681a      	ldr	r2, [r3, #0]
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
//PC:13 - LED
  GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
  GPIOC->CRH |= GPIO_CRH_MODE13_1;

  usartInit(115200);
 80002ee:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
  
// --- GPIO setup ---
//PA:0 - KEY input pull-up
  GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80002f2:	f022 020f 	bic.w	r2, r2, #15
 80002f6:	601a      	str	r2, [r3, #0]
  GPIOA->CRL |= GPIO_CRL_CNF0_1;
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	f042 0208 	orr.w	r2, r2, #8
 80002fe:	601a      	str	r2, [r3, #0]
//PA:9  - Usart TX alternate output open drain 50MHz
//PA:10 - Usart RX input pull-up
  GPIOA->CRH &= ~(GPIO_CRH_CNF9   | GPIO_CRH_MODE9  |
 8000300:	685a      	ldr	r2, [r3, #4]
 8000302:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8000306:	605a      	str	r2, [r3, #4]
                  GPIO_CRH_CNF10  | GPIO_CRH_MODE10);
  GPIOA->CRH |= (GPIO_CRH_CNF9    | GPIO_CRH_MODE9  |
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	f442 620f 	orr.w	r2, r2, #2288	; 0x8f0
 800030e:	605a      	str	r2, [r3, #4]
                 GPIO_CRH_CNF10_1);
//PA:0,10 = 1
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
 8000310:	611d      	str	r5, [r3, #16]
//PC:13 - LED
  GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
 8000312:	684b      	ldr	r3, [r1, #4]
 8000314:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000318:	604b      	str	r3, [r1, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13_1;
 800031a:	684b      	ldr	r3, [r1, #4]
 800031c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000320:	604b      	str	r3, [r1, #4]

  usartInit(115200);
 8000322:	f000 f915 	bl	8000550 <usartInit>
  rtosInit(0);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 f84c 	bl	80003c4 <rtosInit>
  addTimer(scanKey,20,20);
 800032c:	2214      	movs	r2, #20
 800032e:	4611      	mov	r1, r2
 8000330:	480e      	ldr	r0, [pc, #56]	; (800036c <main+0xa0>)
 8000332:	f000 f82d 	bl	8000390 <addTimer>
  addTimer(togleLed,1000,1000);
 8000336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033a:	4611      	mov	r1, r2
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <main+0xa4>)
 800033e:	f000 f827 	bl	8000390 <addTimer>
  __set_PSP((uint32_t)&task[3]);
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <main+0xa8>)
 8000344:	f7ff ff0d 	bl	8000162 <__set_PSP>
  __set_CONTROL(3);
 8000348:	2003      	movs	r0, #3
 800034a:	f7ff ff0d 	bl	8000168 <__set_CONTROL>
  usartPrint("Start\n");
 800034e:	480a      	ldr	r0, [pc, #40]	; (8000378 <main+0xac>)
 8000350:	f000 f916 	bl	8000580 <usartPrint>
  usartPrint("Begin\n");
 8000354:	4809      	ldr	r0, [pc, #36]	; (800037c <main+0xb0>)
 8000356:	f000 f913 	bl	8000580 <usartPrint>
  while(1) {
extern void __set_reg(void);
    __set_reg();
 800035a:	f7ff ff08 	bl	800016e <__set_reg>
 800035e:	e7fc      	b.n	800035a <main+0x8e>
 8000360:	40021000 	.word	0x40021000
 8000364:	40010800 	.word	0x40010800
 8000368:	40011000 	.word	0x40011000
 800036c:	08000295 	.word	0x08000295
 8000370:	0800023d 	.word	0x0800023d
 8000374:	200000d0 	.word	0x200000d0
 8000378:	080005c8 	.word	0x080005c8
 800037c:	080005d0 	.word	0x080005d0

08000380 <timerStat>:
static volatile uint32_t current_load;
volatile uint8_t flag_delay;
static void (*idle_callback)(void);

static void timerStat() {
  load_cpu=current_load;
 8000380:	4b02      	ldr	r3, [pc, #8]	; (800038c <timerStat+0xc>)
  current_load=0;
 8000382:	2200      	movs	r2, #0
static volatile uint32_t current_load;
volatile uint8_t flag_delay;
static void (*idle_callback)(void);

static void timerStat() {
  load_cpu=current_load;
 8000384:	6819      	ldr	r1, [r3, #0]
 8000386:	6059      	str	r1, [r3, #4]
  current_load=0;
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	4770      	bx	lr
 800038c:	2000017c 	.word	0x2000017c

08000390 <addTimer>:

uint32_t getLoadCPU() {
  return load_cpu;
}

uint8_t addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto) {
 8000390:	b470      	push	{r4, r5, r6}

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8000392:	b672      	cpsid	i
  __disable_irq();
  uint8_t n = timer_new++;
 8000394:	4d09      	ldr	r5, [pc, #36]	; (80003bc <addTimer+0x2c>)
 8000396:	7a2b      	ldrb	r3, [r5, #8]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	1c5c      	adds	r4, r3, #1
 800039c:	b2e4      	uxtb	r4, r4
  if (n<TMR) {
 800039e:	2b07      	cmp	r3, #7
  return load_cpu;
}

uint8_t addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto) {
  __disable_irq();
  uint8_t n = timer_new++;
 80003a0:	722c      	strb	r4, [r5, #8]
  if (n<TMR) {
 80003a2:	d807      	bhi.n	80003b4 <addTimer+0x24>
    tmr[n].callback=callback;
 80003a4:	4e06      	ldr	r6, [pc, #24]	; (80003c0 <addTimer+0x30>)
 80003a6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80003aa:	00a4      	lsls	r4, r4, #2
 80003ac:	1935      	adds	r5, r6, r4
 80003ae:	5130      	str	r0, [r6, r4]
    tmr[n].timer=timer;
 80003b0:	6069      	str	r1, [r5, #4]
    tmr[n].timer_auto=timer_auto;
 80003b2:	60aa      	str	r2, [r5, #8]


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80003b4:	b662      	cpsie	i
  }
  __enable_irq();
  return n;
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	bc70      	pop	{r4, r5, r6}
 80003ba:	4770      	bx	lr
 80003bc:	2000017c 	.word	0x2000017c
 80003c0:	20000110 	.word	0x20000110

080003c4 <rtosInit>:

void rtosInit(void (*idle_func)()) {
 80003c4:	b4f0      	push	{r4, r5, r6, r7}
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <rtosInit+0x48>)
 80003c8:	4f11      	ldr	r7, [pc, #68]	; (8000410 <rtosInit+0x4c>)
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80003ca:	4d12      	ldr	r5, [pc, #72]	; (8000414 <rtosInit+0x50>)
  idle_callback=idle_func;
 80003cc:	4a12      	ldr	r2, [pc, #72]	; (8000418 <rtosInit+0x54>)
 80003ce:	26f0      	movs	r6, #240	; 0xf0
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003d0:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80003d2:	2107      	movs	r1, #7
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80003d4:	605f      	str	r7, [r3, #4]
 80003d6:	60d0      	str	r0, [r2, #12]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80003d8:	f885 6023 	strb.w	r6, [r5, #35]	; 0x23
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003dc:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80003de:	6019      	str	r1, [r3, #0]

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80003e0:	b672      	cpsid	i
  return load_cpu;
}

uint8_t addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto) {
  __disable_irq();
  uint8_t n = timer_new++;
 80003e2:	7a13      	ldrb	r3, [r2, #8]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	1c59      	adds	r1, r3, #1
 80003e8:	b2c9      	uxtb	r1, r1
  if (n<TMR) {
 80003ea:	2b07      	cmp	r3, #7
  return load_cpu;
}

uint8_t addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto) {
  __disable_irq();
  uint8_t n = timer_new++;
 80003ec:	7211      	strb	r1, [r2, #8]
  if (n<TMR) {
 80003ee:	d80a      	bhi.n	8000406 <rtosInit+0x42>
    tmr[n].callback=callback;
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <rtosInit+0x58>)
 80003f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4c09      	ldr	r4, [pc, #36]	; (8000420 <rtosInit+0x5c>)
 80003fa:	18c2      	adds	r2, r0, r3
    tmr[n].timer=timer;
 80003fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8

uint8_t addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto) {
  __disable_irq();
  uint8_t n = timer_new++;
  if (n<TMR) {
    tmr[n].callback=callback;
 8000400:	50c4      	str	r4, [r0, r3]
    tmr[n].timer=timer;
 8000402:	6051      	str	r1, [r2, #4]
    tmr[n].timer_auto=timer_auto;
 8000404:	6091      	str	r1, [r2, #8]


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8000406:	b662      	cpsie	i

void rtosInit(void (*idle_func)()) {
  idle_callback=idle_func;
  SysTick_Config(TICKS);
  addTimer(timerStat,1000,1000);
}
 8000408:	bcf0      	pop	{r4, r5, r6, r7}
 800040a:	4770      	bx	lr
 800040c:	e000e010 	.word	0xe000e010
 8000410:	0001193f 	.word	0x0001193f
 8000414:	e000ed00 	.word	0xe000ed00
 8000418:	2000017c 	.word	0x2000017c
 800041c:	20000110 	.word	0x20000110
 8000420:	08000381 	.word	0x08000381

08000424 <removeTimer>:

void removeTimer(uint8_t num_tmr) {
 8000424:	b538      	push	{r3, r4, r5, lr}
  __memcpy(&tmr[num_tmr+1],&tmr[num_tmr],(sizeof(struct TIMER)) * (timer_new-num_tmr-1));
 8000426:	4c0d      	ldr	r4, [pc, #52]	; (800045c <removeTimer+0x38>)
 8000428:	1c43      	adds	r3, r0, #1
 800042a:	7a22      	ldrb	r2, [r4, #8]
 800042c:	4d0c      	ldr	r5, [pc, #48]	; (8000460 <removeTimer+0x3c>)
 800042e:	1a12      	subs	r2, r2, r0
 8000430:	3a01      	subs	r2, #1
 8000432:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800043a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800043e:	0092      	lsls	r2, r2, #2
 8000440:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 8000444:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8000448:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800044c:	f7ff feb4 	bl	80001b8 <__memcpy>
  timer_new--;
 8000450:	7a23      	ldrb	r3, [r4, #8]
 8000452:	3b01      	subs	r3, #1
 8000454:	b2db      	uxtb	r3, r3
 8000456:	7223      	strb	r3, [r4, #8]
 8000458:	bd38      	pop	{r3, r4, r5, pc}
 800045a:	bf00      	nop
 800045c:	2000017c 	.word	0x2000017c
 8000460:	20000110 	.word	0x20000110

08000464 <SysTick_Handler>:
}

void SysTick_Handler(void) {
 8000464:	b570      	push	{r4, r5, r6, lr}
  for(int i=0; i<timer_new; i++) {
 8000466:	4e16      	ldr	r6, [pc, #88]	; (80004c0 <SysTick_Handler+0x5c>)
 8000468:	7a33      	ldrb	r3, [r6, #8]
 800046a:	b1f3      	cbz	r3, 80004aa <SysTick_Handler+0x46>
 800046c:	4c15      	ldr	r4, [pc, #84]	; (80004c4 <SysTick_Handler+0x60>)
 800046e:	2500      	movs	r5, #0
 8000470:	e006      	b.n	8000480 <SysTick_Handler+0x1c>
    if (tmr[i].timer) {
      tmr[i].timer--;
 8000472:	6062      	str	r2, [r4, #4]
  __memcpy(&tmr[num_tmr+1],&tmr[num_tmr],(sizeof(struct TIMER)) * (timer_new-num_tmr-1));
  timer_new--;
}

void SysTick_Handler(void) {
  for(int i=0; i<timer_new; i++) {
 8000474:	7a33      	ldrb	r3, [r6, #8]
 8000476:	3501      	adds	r5, #1
 8000478:	42ab      	cmp	r3, r5
 800047a:	f104 040c 	add.w	r4, r4, #12
 800047e:	dd14      	ble.n	80004aa <SysTick_Handler+0x46>
    if (tmr[i].timer) {
 8000480:	6863      	ldr	r3, [r4, #4]
      tmr[i].timer--;
 8000482:	1e5a      	subs	r2, r3, #1
  timer_new--;
}

void SysTick_Handler(void) {
  for(int i=0; i<timer_new; i++) {
    if (tmr[i].timer) {
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f4      	bne.n	8000472 <SysTick_Handler+0xe>
      tmr[i].timer--;
    } else {
      tmr[i].timer=tmr[i].timer_auto;
 8000488:	68a3      	ldr	r3, [r4, #8]
      if (tmr[i].callback) tmr[i].callback();
 800048a:	6822      	ldr	r2, [r4, #0]
void SysTick_Handler(void) {
  for(int i=0; i<timer_new; i++) {
    if (tmr[i].timer) {
      tmr[i].timer--;
    } else {
      tmr[i].timer=tmr[i].timer_auto;
 800048c:	6063      	str	r3, [r4, #4]
      if (tmr[i].callback) tmr[i].callback();
 800048e:	b10a      	cbz	r2, 8000494 <SysTick_Handler+0x30>
 8000490:	4790      	blx	r2
 8000492:	6863      	ldr	r3, [r4, #4]
      if (!tmr[i].timer) removeTimer(i);
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1ed      	bne.n	8000474 <SysTick_Handler+0x10>
 8000498:	b2e8      	uxtb	r0, r5
 800049a:	f7ff ffc3 	bl	8000424 <removeTimer>
  __memcpy(&tmr[num_tmr+1],&tmr[num_tmr],(sizeof(struct TIMER)) * (timer_new-num_tmr-1));
  timer_new--;
}

void SysTick_Handler(void) {
  for(int i=0; i<timer_new; i++) {
 800049e:	7a33      	ldrb	r3, [r6, #8]
 80004a0:	3501      	adds	r5, #1
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f104 040c 	add.w	r4, r4, #12
 80004a8:	dcea      	bgt.n	8000480 <SysTick_Handler+0x1c>
      tmr[i].timer=tmr[i].timer_auto;
      if (tmr[i].callback) tmr[i].callback();
      if (!tmr[i].timer) removeTimer(i);
    }
  }
  current_load +=(TICKS-SysTick->VAL);
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <SysTick_Handler+0x64>)
 80004ac:	6899      	ldr	r1, [r3, #8]
 80004ae:	6832      	ldr	r2, [r6, #0]
 80004b0:	f502 338c 	add.w	r3, r2, #71680	; 0x11800
 80004b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	6033      	str	r3, [r6, #0]
}
 80004bc:	bd70      	pop	{r4, r5, r6, pc}
 80004be:	bf00      	nop
 80004c0:	2000017c 	.word	0x2000017c
 80004c4:	20000110 	.word	0x20000110
 80004c8:	e000e010 	.word	0xe000e010

080004cc <SystemInit>:
#include "stm32f10x.h"
#include "sysinit.h"

void SystemInit (void) {
  /* Set RCC initial state */
  RCC->CR   = RCC_CR_RESET_STATE;
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <SystemInit+0x58>)
  RCC->CFGR = 0;
 80004ce:	2200      	movs	r2, #0
  RCC->CIR  = 0;
  /* Enable HSE */
  RCC->CR |= RCC_CR_HSEON;
  /* Wait till HSE is ready */
  while (!(RCC->CR & RCC_CR_HSERDY));
 80004d0:	4619      	mov	r1, r3
#include "stm32f10x.h"
#include "sysinit.h"

void SystemInit (void) {
  /* Set RCC initial state */
  RCC->CR   = RCC_CR_RESET_STATE;
 80004d2:	2083      	movs	r0, #131	; 0x83
 80004d4:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;
 80004d6:	605a      	str	r2, [r3, #4]
  RCC->CIR  = 0;
 80004d8:	609a      	str	r2, [r3, #8]
  /* Enable HSE */
  RCC->CR |= RCC_CR_HSEON;
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80004e0:	601a      	str	r2, [r3, #0]
  /* Wait till HSE is ready */
  while (!(RCC->CR & RCC_CR_HSERDY));
 80004e2:	680b      	ldr	r3, [r1, #0]
 80004e4:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <SystemInit+0x58>)
 80004e6:	0398      	lsls	r0, r3, #14
 80004e8:	d5fb      	bpl.n	80004e2 <SystemInit+0x16>
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1  | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_PPRE1_DIV2 |
               RCC_CFGR_PLLSRC_HSE | PLL_MUL;
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
  /* Wait till PLL is ready */
  while(!(RCC->CR & RCC_CR_PLLRDY));
 80004ea:	4611      	mov	r1, r2
  RCC->CR |= RCC_CR_HSEON;
  /* Wait till HSE is ready */
  while (!(RCC->CR & RCC_CR_HSERDY));
  /* Enable Prefetch Buffer, set Flash memory wait state */
#if SYSCLK > 48000000
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_2;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <SystemInit+0x5c>)
 80004ee:	2012      	movs	r0, #18
 80004f0:	6018      	str	r0, [r3, #0]
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
#else
  FLASH->ACR = FLASH_ACR_PRFTBE;
#endif
  /* HCLK = PCLK1 = PCLK2 = SYSCLK = HSE * PLL_MUL*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1  | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_PPRE1_DIV2 |
 80004f2:	6853      	ldr	r3, [r2, #4]
 80004f4:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80004f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fc:	6053      	str	r3, [r2, #4]
               RCC_CFGR_PLLSRC_HSE | PLL_MUL;
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80004fe:	6813      	ldr	r3, [r2, #0]
 8000500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000504:	6013      	str	r3, [r2, #0]
  /* Wait till PLL is ready */
  while(!(RCC->CR & RCC_CR_PLLRDY));
 8000506:	680b      	ldr	r3, [r1, #0]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <SystemInit+0x58>)
 800050a:	019b      	lsls	r3, r3, #6
 800050c:	d5fb      	bpl.n	8000506 <SystemInit+0x3a>
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 800050e:	4611      	mov	r1, r2
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
  /* Wait till PLL is ready */
  while(!(RCC->CR & RCC_CR_PLLRDY));
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000510:	6853      	ldr	r3, [r2, #4]
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	6053      	str	r3, [r2, #4]
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 8000518:	684b      	ldr	r3, [r1, #4]
 800051a:	f003 030c 	and.w	r3, r3, #12
 800051e:	2b08      	cmp	r3, #8
 8000520:	d1fa      	bne.n	8000518 <SystemInit+0x4c>
}
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000
 8000528:	40022000 	.word	0x40022000

0800052c <usartWrite>:
#include "usart1.h"
#include "asmfunc.h"
#include "sysinit.h"
#include "srtos.h"

void usartWrite(uint8_t c) {
 800052c:	b410      	push	{r4}
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <usartWrite+0x1c>)
 8000530:	4c06      	ldr	r4, [pc, #24]	; (800054c <usartWrite+0x20>)
 8000532:	6853      	ldr	r3, [r2, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1fc      	bne.n	8000532 <usartWrite+0x6>
 8000538:	8823      	ldrh	r3, [r4, #0]
 800053a:	4904      	ldr	r1, [pc, #16]	; (800054c <usartWrite+0x20>)
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	d5f8      	bpl.n	8000532 <usartWrite+0x6>
  USART1->DR = c;
 8000540:	b283      	uxth	r3, r0
 8000542:	808b      	strh	r3, [r1, #4]
}
 8000544:	bc10      	pop	{r4}
 8000546:	4770      	bx	lr
 8000548:	40020044 	.word	0x40020044
 800054c:	40013800 	.word	0x40013800

08000550 <usartInit>:

  // --- UART setup ----
void usartInit(uint32_t baud) {
  USART1->BRR = SYSCLK / baud;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <usartInit+0x28>)
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <usartInit+0x2c>)
 8000554:	fbb3 f0f0 	udiv	r0, r3, r0
 8000558:	b280      	uxth	r0, r0
 800055a:	8110      	strh	r0, [r2, #8]
  USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800055c:	8a93      	ldrh	r3, [r2, #20]
 800055e:	b29b      	uxth	r3, r3
 8000560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000564:	8293      	strh	r3, [r2, #20]
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000566:	8993      	ldrh	r3, [r2, #12]
 8000568:	b29b      	uxth	r3, r3
 800056a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056e:	f043 030c 	orr.w	r3, r3, #12
 8000572:	8193      	strh	r3, [r2, #12]
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	044aa200 	.word	0x044aa200
 800057c:	40013800 	.word	0x40013800

08000580 <usartPrint>:
}

void usartPrint (char *s) {
 8000580:	b538      	push	{r3, r4, r5, lr}
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <usartPrint+0x34>)
  USART1->BRR = SYSCLK / baud;
  USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
}

void usartPrint (char *s) {
 8000584:	4605      	mov	r5, r0
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <usartPrint+0x38>)
 8000588:	6853      	ldr	r3, [r2, #4]
 800058a:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <usartPrint+0x34>)
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1fb      	bne.n	8000588 <usartPrint+0x8>
 8000590:	8801      	ldrh	r1, [r0, #0]
 8000592:	0609      	lsls	r1, r1, #24
 8000594:	d5f8      	bpl.n	8000588 <usartPrint+0x8>
  DMA1_Channel4->CCR = 0;
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
 8000596:	4a09      	ldr	r2, [pc, #36]	; (80005bc <usartPrint+0x3c>)
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
}

void usartPrint (char *s) {
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
  DMA1_Channel4->CCR = 0;
 8000598:	6023      	str	r3, [r4, #0]
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
  DMA1_Channel4->CMAR = (uint32_t)s;
  DMA1_Channel4->CNDTR = __strlen(s);
 800059a:	4628      	mov	r0, r5
}

void usartPrint (char *s) {
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
  DMA1_Channel4->CCR = 0;
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
 800059c:	60a2      	str	r2, [r4, #8]
  DMA1_Channel4->CMAR = (uint32_t)s;
 800059e:	60e5      	str	r5, [r4, #12]
  DMA1_Channel4->CNDTR = __strlen(s);
 80005a0:	f7ff fdc6 	bl	8000130 <__strlen>
  DMA1_Channel4->CCR = DMA_CCR1_MINC | DMA_CCR1_DIR;
 80005a4:	2390      	movs	r3, #144	; 0x90
void usartPrint (char *s) {
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
  DMA1_Channel4->CCR = 0;
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
  DMA1_Channel4->CMAR = (uint32_t)s;
  DMA1_Channel4->CNDTR = __strlen(s);
 80005a6:	6060      	str	r0, [r4, #4]
  DMA1_Channel4->CCR = DMA_CCR1_MINC | DMA_CCR1_DIR;
 80005a8:	6023      	str	r3, [r4, #0]
  DMA1_Channel4->CCR |= DMA_CCR1_EN;
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6023      	str	r3, [r4, #0]
 80005b2:	bd38      	pop	{r3, r4, r5, pc}
 80005b4:	40020044 	.word	0x40020044
 80005b8:	40013800 	.word	0x40013800
 80005bc:	40013804 	.word	0x40013804
