
srtos.elf:     file format elf32-littlearm


Disassembly of section .text:

08000130 <Reset_Handler>:
 8000130:	4807      	ldr	r0, [pc, #28]	; (8000150 <Reset_Handler+0x20>)
 8000132:	4685      	mov	sp, r0
 8000134:	b672      	cpsid	i
 8000136:	4807      	ldr	r0, [pc, #28]	; (8000154 <Reset_Handler+0x24>)
 8000138:	4907      	ldr	r1, [pc, #28]	; (8000158 <Reset_Handler+0x28>)
 800013a:	4a08      	ldr	r2, [pc, #32]	; (800015c <Reset_Handler+0x2c>)
 800013c:	f000 f816 	bl	800016c <__memcpy>
 8000140:	4807      	ldr	r0, [pc, #28]	; (8000160 <Reset_Handler+0x30>)
 8000142:	4908      	ldr	r1, [pc, #32]	; (8000164 <Reset_Handler+0x34>)
 8000144:	f000 f81a 	bl	800017c <__bzero>
 8000148:	4807      	ldr	r0, [pc, #28]	; (8000168 <Reset_Handler+0x38>)
 800014a:	4780      	blx	r0
 800014c:	f000 b8b4 	b.w	80002b8 <main>
 8000150:	20005000 	.word	0x20005000
 8000154:	08000674 	.word	0x08000674
 8000158:	200001c8 	.word	0x200001c8
 800015c:	00000000 	.word	0x00000000
 8000160:	200001b4 	.word	0x200001b4
 8000164:	00000012 	.word	0x00000012
 8000168:	0800058d 	.word	0x0800058d

0800016c <__memcpy>:
 800016c:	b12a      	cbz	r2, 800017a <_mcl1>

0800016e <_mcl0>:
 800016e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000172:	f801 3b01 	strb.w	r3, [r1], #1
 8000176:	3a01      	subs	r2, #1
 8000178:	d1f9      	bne.n	800016e <_mcl0>

0800017a <_mcl1>:
 800017a:	4770      	bx	lr

0800017c <__bzero>:
 800017c:	b129      	cbz	r1, 800018a <_bzr1>
 800017e:	f04f 0200 	mov.w	r2, #0

08000182 <_bzr0>:
 8000182:	f800 2b01 	strb.w	r2, [r0], #1
 8000186:	3901      	subs	r1, #1
 8000188:	d1fb      	bne.n	8000182 <_bzr0>

0800018a <_bzr1>:
 800018a:	4770      	bx	lr

0800018c <ADC1_2_IRQHandler>:
 800018c:	f7ff bffe 	b.w	800018c <ADC1_2_IRQHandler>

08000190 <__strlen>:
 8000190:	f100 0201 	add.w	r2, r0, #1

08000194 <_stl0>:
 8000194:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000198:	4309      	orrs	r1, r1
 800019a:	d1fb      	bne.n	8000194 <_stl0>
 800019c:	eba0 0002 	sub.w	r0, r0, r2
 80001a0:	4770      	bx	lr

080001a2 <__stpcpy>:
 80001a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80001a6:	b112      	cbz	r2, 80001ae <_stp1>
 80001a8:	f800 2b01 	strb.w	r2, [r0], #1
 80001ac:	e7f9      	b.n	80001a2 <__stpcpy>

080001ae <_stp1>:
 80001ae:	4770      	bx	lr

080001b0 <itoa>:
#include "func.h"
#include "asmfunc.h"

char* itoa(char* bufer, uint32_t num, uint8_t num_dig, uint8_t type) {
 80001b0:	b470      	push	{r4, r5, r6}
  char *s;
  if (num_dig) {
 80001b2:	b38a      	cbz	r2, 8000218 <itoa+0x68>
    s = &bufer[num_dig];
 80001b4:	1884      	adds	r4, r0, r2
  } else {
    s = &bufer[10];
  }
  *(s) = 0;
 80001b6:	2500      	movs	r5, #0
 80001b8:	7025      	strb	r5, [r4, #0]
  if(type) {
 80001ba:	b9ab      	cbnz	r3, 80001e8 <itoa+0x38>
      *(--s) = n;
      num >>= 4;
    } while(s!=bufer && (num_dig || num));
  } else {
    do {
      *(--s) = (uint8_t)(num%10 + 0x30);
 80001bc:	4e18      	ldr	r6, [pc, #96]	; (8000220 <itoa+0x70>)
 80001be:	fba6 3501 	umull	r3, r5, r6, r1
 80001c2:	08ed      	lsrs	r5, r5, #3
 80001c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80001c8:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80001cc:	3330      	adds	r3, #48	; 0x30
 80001ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
      num /= 10;
    } while(s!=bufer && (num_dig || num));
 80001d2:	42a0      	cmp	r0, r4
      num >>= 4;
    } while(s!=bufer && (num_dig || num));
  } else {
    do {
      *(--s) = (uint8_t)(num%10 + 0x30);
      num /= 10;
 80001d4:	4629      	mov	r1, r5
    } while(s!=bufer && (num_dig || num));
 80001d6:	d01a      	beq.n	800020e <itoa+0x5e>
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d1f0      	bne.n	80001be <itoa+0xe>
 80001dc:	2d00      	cmp	r5, #0
 80001de:	d1ee      	bne.n	80001be <itoa+0xe>
  }
  if (num_dig) {
    return bufer + num_dig;
  } else {
    return __stpcpy(bufer, s);
 80001e0:	4621      	mov	r1, r4
  }
}
 80001e2:	bc70      	pop	{r4, r5, r6}
    } while(s!=bufer && (num_dig || num));
  }
  if (num_dig) {
    return bufer + num_dig;
  } else {
    return __stpcpy(bufer, s);
 80001e4:	f7ff bfdd 	b.w	80001a2 <__stpcpy>
    s = &bufer[10];
  }
  *(s) = 0;
  if(type) {
    do {
      int n = (num&0xf)+0x30;
 80001e8:	f001 050f 	and.w	r5, r1, #15
 80001ec:	f105 0330 	add.w	r3, r5, #48	; 0x30
      if (n>0x39) n += 7; 
 80001f0:	2b39      	cmp	r3, #57	; 0x39
 80001f2:	bf88      	it	hi
 80001f4:	f105 0337 	addhi.w	r3, r5, #55	; 0x37
      *(--s) = n;
 80001f8:	f804 3d01 	strb.w	r3, [r4, #-1]!
      num >>= 4;
    } while(s!=bufer && (num_dig || num));
 80001fc:	42a0      	cmp	r0, r4
  if(type) {
    do {
      int n = (num&0xf)+0x30;
      if (n>0x39) n += 7; 
      *(--s) = n;
      num >>= 4;
 80001fe:	ea4f 1111 	mov.w	r1, r1, lsr #4
    } while(s!=bufer && (num_dig || num));
 8000202:	d004      	beq.n	800020e <itoa+0x5e>
 8000204:	2a00      	cmp	r2, #0
 8000206:	d1ef      	bne.n	80001e8 <itoa+0x38>
 8000208:	2900      	cmp	r1, #0
 800020a:	d1ed      	bne.n	80001e8 <itoa+0x38>
 800020c:	e7e8      	b.n	80001e0 <itoa+0x30>
    do {
      *(--s) = (uint8_t)(num%10 + 0x30);
      num /= 10;
    } while(s!=bufer && (num_dig || num));
  }
  if (num_dig) {
 800020e:	2a00      	cmp	r2, #0
 8000210:	d0e6      	beq.n	80001e0 <itoa+0x30>
    return bufer + num_dig;
  } else {
    return __stpcpy(bufer, s);
  }
}
 8000212:	bc70      	pop	{r4, r5, r6}
      *(--s) = (uint8_t)(num%10 + 0x30);
      num /= 10;
    } while(s!=bufer && (num_dig || num));
  }
  if (num_dig) {
    return bufer + num_dig;
 8000214:	4410      	add	r0, r2
  } else {
    return __stpcpy(bufer, s);
  }
}
 8000216:	4770      	bx	lr
char* itoa(char* bufer, uint32_t num, uint8_t num_dig, uint8_t type) {
  char *s;
  if (num_dig) {
    s = &bufer[num_dig];
  } else {
    s = &bufer[10];
 8000218:	f100 040a 	add.w	r4, r0, #10
 800021c:	e7cb      	b.n	80001b6 <itoa+0x6>
 800021e:	bf00      	nop
 8000220:	cccccccd 	.word	0xcccccccd

08000224 <togleLed>:
    delay(2000);
  }
}

void togleLed(void) {
  GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <togleLed+0xc>)
 8000226:	68d3      	ldr	r3, [r2, #12]
 8000228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	40011000 	.word	0x40011000

08000234 <task0>:
#define USART_BUFER_SIZE 80
char usart_rx_bufer[USART_BUFER_SIZE];
char usart_tx_bufer[USART_BUFER_SIZE];
//char usart_tx_bufer_task0[USART_BUFER_SIZE];

void task0(void) {
 8000234:	b508      	push	{r3, lr}
  while(1) {
    usartPrint("task0\n");
 8000236:	480f      	ldr	r0, [pc, #60]	; (8000274 <task0+0x40>)
 8000238:	f000 f9f0 	bl	800061c <usartPrint>
}

inline uint32_t __get_CONTROL(void)
{
  uint32_t value;
  __asm volatile
 800023c:	f3ef 8114 	mrs	r1, CONTROL
    char *s = itoa(usart_tx_bufer, __get_CONTROL(), 1, HEX);
 8000240:	2301      	movs	r3, #1
 8000242:	461a      	mov	r2, r3
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <task0+0x44>)
 8000246:	f7ff ffb3 	bl	80001b0 <itoa>
    *(s++) = ' ';
 800024a:	2320      	movs	r3, #32
 800024c:	7003      	strb	r3, [r0, #0]
 800024e:	3001      	adds	r0, #1
}

inline uint32_t __get_SP(void)
{
  uint32_t value;
  __asm volatile
 8000250:	4669      	mov	r1, sp
    s = itoa(s, __get_SP(), 8, HEX);
 8000252:	2301      	movs	r3, #1
 8000254:	2208      	movs	r2, #8
 8000256:	f7ff ffab 	bl	80001b0 <itoa>
    *(s++) = '\n';
 800025a:	220a      	movs	r2, #10
    *(s++) = 0;
 800025c:	2300      	movs	r3, #0
  while(1) {
    usartPrint("task0\n");
    char *s = itoa(usart_tx_bufer, __get_CONTROL(), 1, HEX);
    *(s++) = ' ';
    s = itoa(s, __get_SP(), 8, HEX);
    *(s++) = '\n';
 800025e:	7002      	strb	r2, [r0, #0]
    *(s++) = 0;
 8000260:	7043      	strb	r3, [r0, #1]
    usartPrint(usart_tx_bufer);
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <task0+0x44>)
 8000264:	f000 f9da 	bl	800061c <usartPrint>
    delay(2000);
 8000268:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800026c:	f000 f91e 	bl	80004ac <delay>
 8000270:	e7e1      	b.n	8000236 <task0+0x2>
 8000272:	bf00      	nop
 8000274:	0800065c 	.word	0x0800065c
 8000278:	20000050 	.word	0x20000050

0800027c <scanKey>:
}

void scanKey() {
  volatile static uint32_t scan_old;
  volatile static uint32_t scan_changes;
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <scanKey+0x2c>)
  scan_changes = scan_old ^ scan;
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <scanKey+0x30>)
}

void scanKey() {
  volatile static uint32_t scan_old;
  volatile static uint32_t scan_changes;
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
 8000280:	689b      	ldr	r3, [r3, #8]
  scan_changes = scan_old ^ scan;
 8000282:	6811      	ldr	r1, [r2, #0]
}

void scanKey() {
  volatile static uint32_t scan_old;
  volatile static uint32_t scan_changes;
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
 8000284:	f003 0301 	and.w	r3, r3, #1
  scan_changes = scan_old ^ scan;
 8000288:	4059      	eors	r1, r3
 800028a:	6051      	str	r1, [r2, #4]
  scan_old = scan;
 800028c:	6013      	str	r3, [r2, #0]
  if (scan_changes & ~scan) {
 800028e:	6852      	ldr	r2, [r2, #4]
 8000290:	ea32 0303 	bics.w	r3, r2, r3
 8000294:	d100      	bne.n	8000298 <scanKey+0x1c>
 8000296:	4770      	bx	lr
    delay(2000);
  }
}

void togleLed(void) {
  GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000298:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <scanKey+0x34>)
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
  scan_changes = scan_old ^ scan;
  scan_old = scan;
  if (scan_changes & ~scan) {
    togleLed();
    usartPrint("Key\n");
 800029a:	4806      	ldr	r0, [pc, #24]	; (80002b4 <scanKey+0x38>)
    delay(2000);
  }
}

void togleLed(void) {
  GPIOC->ODR ^= GPIO_ODR_ODR13;
 800029c:	68d3      	ldr	r3, [r2, #12]
 800029e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002a2:	60d3      	str	r3, [r2, #12]
  uint16_t scan = GPIOA->IDR & GPIO_IDR_IDR0;
  scan_changes = scan_old ^ scan;
  scan_old = scan;
  if (scan_changes & ~scan) {
    togleLed();
    usartPrint("Key\n");
 80002a4:	f000 b9ba 	b.w	800061c <usartPrint>
 80002a8:	40010800 	.word	0x40010800
 80002ac:	200001b4 	.word	0x200001b4
 80002b0:	40011000 	.word	0x40011000
 80002b4:	08000664 	.word	0x08000664

080002b8 <main>:
  }
}

int main()
{
 80002b8:	b538      	push	{r3, r4, r5, lr}
  GPIOA->CRH &= ~(GPIO_CRH_CNF9   | GPIO_CRH_MODE9  |
                  GPIO_CRH_CNF10  | GPIO_CRH_MODE10);
  GPIOA->CRH |= (GPIO_CRH_CNF9    | GPIO_CRH_MODE9  |
                 GPIO_CRH_CNF10_1);
//PA:0,10 = 1
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
 80002ba:	f240 4501 	movw	r5, #1025	; 0x401
}

int main()
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
 80002be:	4c21      	ldr	r4, [pc, #132]	; (8000344 <main+0x8c>)
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
  
// --- GPIO setup ---
//PA:0 - KEY input pull-up
  GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80002c0:	4b21      	ldr	r3, [pc, #132]	; (8000348 <main+0x90>)
}

int main()
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
 80002c2:	69a2      	ldr	r2, [r4, #24]
  GPIOA->CRH |= (GPIO_CRH_CNF9    | GPIO_CRH_MODE9  |
                 GPIO_CRH_CNF10_1);
//PA:0,10 = 1
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
//PC:13 - LED
  GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
 80002c4:	4921      	ldr	r1, [pc, #132]	; (800034c <main+0x94>)
}

int main()
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
 80002c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002ca:	f042 0214 	orr.w	r2, r2, #20
 80002ce:	61a2      	str	r2, [r4, #24]
                   RCC_APB2RSTR_USART1RST) ;
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80002d0:	6962      	ldr	r2, [r4, #20]
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
//PC:13 - LED
  GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
  GPIOC->CRH |= GPIO_CRH_MODE13_1;

  usartInit(115200);
 80002d2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
{
// enable PORT_A, PORT_C, USART1
  RCC->APB2ENR |= (RCC_APB2RSTR_IOPARST    | RCC_APB2RSTR_IOPCRST |
                   RCC_APB2RSTR_USART1RST) ;
// enable DMA1
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80002d6:	f042 0201 	orr.w	r2, r2, #1
 80002da:	6162      	str	r2, [r4, #20]
  
// --- GPIO setup ---
//PA:0 - KEY input pull-up
  GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	f022 020f 	bic.w	r2, r2, #15
 80002e2:	601a      	str	r2, [r3, #0]
  GPIOA->CRL |= GPIO_CRL_CNF0_1;
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	f042 0208 	orr.w	r2, r2, #8
 80002ea:	601a      	str	r2, [r3, #0]
//PA:9  - Usart TX alternate output open drain 50MHz
//PA:10 - Usart RX input pull-up
  GPIOA->CRH &= ~(GPIO_CRH_CNF9   | GPIO_CRH_MODE9  |
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80002f2:	605a      	str	r2, [r3, #4]
                  GPIO_CRH_CNF10  | GPIO_CRH_MODE10);
  GPIOA->CRH |= (GPIO_CRH_CNF9    | GPIO_CRH_MODE9  |
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	f442 620f 	orr.w	r2, r2, #2288	; 0x8f0
 80002fa:	605a      	str	r2, [r3, #4]
                 GPIO_CRH_CNF10_1);
//PA:0,10 = 1
  GPIOA->BSRR = GPIO_ODR_ODR0 | GPIO_ODR_ODR10;
 80002fc:	611d      	str	r5, [r3, #16]
//PC:13 - LED
  GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
 80002fe:	684b      	ldr	r3, [r1, #4]
 8000300:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000304:	604b      	str	r3, [r1, #4]
  GPIOC->CRH |= GPIO_CRH_MODE13_1;
 8000306:	684b      	ldr	r3, [r1, #4]
 8000308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030c:	604b      	str	r3, [r1, #4]

  usartInit(115200);
 800030e:	f000 f96d 	bl	80005ec <usartInit>
  rtosInit();
 8000312:	f000 f847 	bl	80003a4 <rtosInit>
  addTimer(scanKey,20,20,0);
 8000316:	2214      	movs	r2, #20
 8000318:	4611      	mov	r1, r2
 800031a:	2300      	movs	r3, #0
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <main+0x98>)
 800031e:	f000 f827 	bl	8000370 <addTimer>
  addTimer(togleLed,1000,1000,0);
 8000322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000326:	4611      	mov	r1, r2
 8000328:	2300      	movs	r3, #0
 800032a:	480a      	ldr	r0, [pc, #40]	; (8000354 <main+0x9c>)
 800032c:	f000 f820 	bl	8000370 <addTimer>
  usartPrint("Start\n");
 8000330:	4809      	ldr	r0, [pc, #36]	; (8000358 <main+0xa0>)
 8000332:	f000 f973 	bl	800061c <usartPrint>
  addTask(task0);
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <main+0xa4>)
 8000338:	f000 f8dc 	bl	80004f4 <addTask>
  rtosStart();
 800033c:	f000 f90e 	bl	800055c <rtosStart>
}
 8000340:	2000      	movs	r0, #0
 8000342:	bd38      	pop	{r3, r4, r5, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	40010800 	.word	0x40010800
 800034c:	40011000 	.word	0x40011000
 8000350:	0800027d 	.word	0x0800027d
 8000354:	08000225 	.word	0x08000225
 8000358:	0800066c 	.word	0x0800066c
 800035c:	08000235 	.word	0x08000235

08000360 <timerStat>:
extern void *__stack_top__;
char usart_tx_bufer_rtos[80];

static void timerStat()
{
  load_cpu=current_load;
 8000360:	4b02      	ldr	r3, [pc, #8]	; (800036c <timerStat+0xc>)
  current_load=0;
 8000362:	2200      	movs	r2, #0
extern void *__stack_top__;
char usart_tx_bufer_rtos[80];

static void timerStat()
{
  load_cpu=current_load;
 8000364:	6819      	ldr	r1, [r3, #0]
 8000366:	6059      	str	r1, [r3, #4]
  current_load=0;
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	4770      	bx	lr
 800036c:	200001bc 	.word	0x200001bc

08000370 <addTimer>:
{
  return load_cpu;
}

void addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto, uint8_t *tick)
{
 8000370:	b4f0      	push	{r4, r5, r6, r7}

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8000372:	b672      	cpsid	i
  __disable_irq();
  uint8_t n = timer_new;
 8000374:	4e09      	ldr	r6, [pc, #36]	; (800039c <addTimer+0x2c>)
 8000376:	7a34      	ldrb	r4, [r6, #8]
 8000378:	b2e4      	uxtb	r4, r4
  if (n<TMR)
 800037a:	2c07      	cmp	r4, #7
 800037c:	d80a      	bhi.n	8000394 <addTimer+0x24>
  {
    tmr[n].callback = callback;
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 800037e:	7a35      	ldrb	r5, [r6, #8]
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 8000380:	4f07      	ldr	r7, [pc, #28]	; (80003a0 <addTimer+0x30>)
 8000382:	0124      	lsls	r4, r4, #4
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 8000384:	3501      	adds	r5, #1
 8000386:	b2ed      	uxtb	r5, r5
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 8000388:	5138      	str	r0, [r7, r4]
 800038a:	443c      	add	r4, r7
    tmr[n].timer = timer;
 800038c:	6061      	str	r1, [r4, #4]
    tmr[n].timer_auto = timer_auto;
 800038e:	60a2      	str	r2, [r4, #8]
    tmr[n].tick = tick;
 8000390:	60e3      	str	r3, [r4, #12]
    timer_new++;
 8000392:	7235      	strb	r5, [r6, #8]


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8000394:	b662      	cpsie	i
  }
  __enable_irq();
}
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	200001bc 	.word	0x200001bc
 80003a0:	20000134 	.word	0x20000134

080003a4 <rtosInit>:

void rtosInit()
{
 80003a4:	b4f0      	push	{r4, r5, r6, r7}
//  SysTick_Config(TICKS);
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
  NVIC_SetPriority (PendSV_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
  SysTick->LOAD  = TICKS - 1;  
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <rtosInit+0x4c>)
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80003a8:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <rtosInit+0x50>)
 80003aa:	4d13      	ldr	r5, [pc, #76]	; (80003f8 <rtosInit+0x54>)
 80003ac:	21f0      	movs	r1, #240	; 0xf0
  SysTick->VAL   = 0;
 80003ae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE | 
 80003b0:	2407      	movs	r4, #7
 80003b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 80003b6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
void rtosInit()
{
//  SysTick_Config(TICKS);
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
  NVIC_SetPriority (PendSV_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
  SysTick->LOAD  = TICKS - 1;  
 80003ba:	605d      	str	r5, [r3, #4]
  SysTick->VAL   = 0;
 80003bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE | 
 80003be:	601c      	str	r4, [r3, #0]

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80003c0:	b672      	cpsid	i
}

void addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto, uint8_t *tick)
{
  __disable_irq();
  uint8_t n = timer_new;
 80003c2:	490e      	ldr	r1, [pc, #56]	; (80003fc <rtosInit+0x58>)
 80003c4:	7a0b      	ldrb	r3, [r1, #8]
 80003c6:	b2db      	uxtb	r3, r3
  if (n<TMR)
 80003c8:	42a3      	cmp	r3, r4
 80003ca:	d80d      	bhi.n	80003e8 <rtosInit+0x44>
  {
    tmr[n].callback = callback;
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80003cc:	7a0a      	ldrb	r2, [r1, #8]
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80003ce:	4e0c      	ldr	r6, [pc, #48]	; (8000400 <rtosInit+0x5c>)
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	4f0c      	ldr	r7, [pc, #48]	; (8000404 <rtosInit+0x60>)
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80003d4:	3201      	adds	r2, #1
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80003d6:	18f4      	adds	r4, r6, r3
    tmr[n].timer = timer;
 80003d8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80003dc:	b2d2      	uxtb	r2, r2
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80003de:	50f7      	str	r7, [r6, r3]
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
 80003e0:	60e0      	str	r0, [r4, #12]
    timer_new++;
 80003e2:	720a      	strb	r2, [r1, #8]
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
    tmr[n].timer = timer;
 80003e4:	6065      	str	r5, [r4, #4]
    tmr[n].timer_auto = timer_auto;
 80003e6:	60a5      	str	r5, [r4, #8]


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80003e8:	b662      	cpsie	i
  SysTick->VAL   = 0;
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE | 
                   SysTick_CTRL_TICKINT   | 
                   SysTick_CTRL_ENABLE;    
  addTimer(timerStat,1000,1000,0);
}
 80003ea:	bcf0      	pop	{r4, r5, r6, r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010
 80003f4:	e000ed00 	.word	0xe000ed00
 80003f8:	0001193f 	.word	0x0001193f
 80003fc:	200001bc 	.word	0x200001bc
 8000400:	20000134 	.word	0x20000134
 8000404:	08000361 	.word	0x08000361

08000408 <SysTick_Handler>:
  __memcpy(&tmr[num_tmr+1],&tmr[num_tmr],(sizeof(struct TIMER)) * (timer_new-num_tmr-1));
  timer_new--;
}

void SysTick_Handler(void)
{
 8000408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for(int i=0; i<timer_new; i++)
 800040c:	4f24      	ldr	r7, [pc, #144]	; (80004a0 <SysTick_Handler+0x98>)
 800040e:	7a3b      	ldrb	r3, [r7, #8]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d03a      	beq.n	800048a <SysTick_Handler+0x82>
 8000414:	4c23      	ldr	r4, [pc, #140]	; (80004a4 <SysTick_Handler+0x9c>)
 8000416:	2501      	movs	r5, #1
 8000418:	e008      	b.n	800042c <SysTick_Handler+0x24>
 800041a:	462e      	mov	r6, r5
  {
    if (tmr[i].timer)
    {
      tmr[i].timer--;
 800041c:	f844 2c0c 	str.w	r2, [r4, #-12]
  timer_new--;
}

void SysTick_Handler(void)
{
  for(int i=0; i<timer_new; i++)
 8000420:	7a3b      	ldrb	r3, [r7, #8]
 8000422:	3501      	adds	r5, #1
 8000424:	42b3      	cmp	r3, r6
 8000426:	f104 0410 	add.w	r4, r4, #16
 800042a:	dd2e      	ble.n	800048a <SysTick_Handler+0x82>
  {
    if (tmr[i].timer)
 800042c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
    {
      tmr[i].timer--;
 8000434:	1e5a      	subs	r2, r3, #1

void SysTick_Handler(void)
{
  for(int i=0; i<timer_new; i++)
  {
    if (tmr[i].timer)
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1ef      	bne.n	800041a <SysTick_Handler+0x12>
    {
      tmr[i].timer--;
    }
    else
    {
      tmr[i].timer=tmr[i].timer_auto;
 800043a:	f854 2c08 	ldr.w	r2, [r4, #-8]
      if (tmr[i].callback) tmr[i].callback();
 800043e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    {
      tmr[i].timer--;
    }
    else
    {
      tmr[i].timer=tmr[i].timer_auto;
 8000442:	f844 2c0c 	str.w	r2, [r4, #-12]
      if (tmr[i].callback) tmr[i].callback();
 8000446:	b103      	cbz	r3, 800044a <SysTick_Handler+0x42>
 8000448:	4798      	blx	r3
      if (tmr[i].tick) (*(tmr[i].tick))++;
 800044a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800044e:	b113      	cbz	r3, 8000456 <SysTick_Handler+0x4e>
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	3201      	adds	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
      if (!tmr[i].timer) removeTimer(i);
 8000456:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  addTimer(timerStat,1000,1000,0);
}

static void removeTimer(uint8_t num_tmr)
{
  __memcpy(&tmr[num_tmr+1],&tmr[num_tmr],(sizeof(struct TIMER)) * (timer_new-num_tmr-1));
 800045a:	462e      	mov	r6, r5
    else
    {
      tmr[i].timer=tmr[i].timer_auto;
      if (tmr[i].callback) tmr[i].callback();
      if (tmr[i].tick) (*(tmr[i].tick))++;
      if (!tmr[i].timer) removeTimer(i);
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1df      	bne.n	8000420 <SysTick_Handler+0x18>
  addTimer(timerStat,1000,1000,0);
}

static void removeTimer(uint8_t num_tmr)
{
  __memcpy(&tmr[num_tmr+1],&tmr[num_tmr],(sizeof(struct TIMER)) * (timer_new-num_tmr-1));
 8000460:	7a3a      	ldrb	r2, [r7, #8]
 8000462:	f1a4 0110 	sub.w	r1, r4, #16
 8000466:	ebc8 0202 	rsb	r2, r8, r2
 800046a:	3a01      	subs	r2, #1
 800046c:	0112      	lsls	r2, r2, #4
 800046e:	4620      	mov	r0, r4
 8000470:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000474:	f7ff fe7a 	bl	800016c <__memcpy>
  timer_new--;
 8000478:	7a3b      	ldrb	r3, [r7, #8]
 800047a:	3501      	adds	r5, #1
 800047c:	3b01      	subs	r3, #1
 800047e:	b2db      	uxtb	r3, r3
 8000480:	723b      	strb	r3, [r7, #8]
}

void SysTick_Handler(void)
{
  for(int i=0; i<timer_new; i++)
 8000482:	7a3b      	ldrb	r3, [r7, #8]
 8000484:	3410      	adds	r4, #16
 8000486:	42b3      	cmp	r3, r6
 8000488:	dcd0      	bgt.n	800042c <SysTick_Handler+0x24>
      if (tmr[i].callback) tmr[i].callback();
      if (tmr[i].tick) (*(tmr[i].tick))++;
      if (!tmr[i].timer) removeTimer(i);
    }
  }
  current_load +=(TICKS-SysTick->VAL);
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <SysTick_Handler+0xa0>)
 800048c:	6899      	ldr	r1, [r3, #8]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	f502 338c 	add.w	r3, r2, #71680	; 0x11800
 8000494:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000498:	1a5b      	subs	r3, r3, r1
 800049a:	603b      	str	r3, [r7, #0]
}
 800049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80004a0:	200001bc 	.word	0x200001bc
 80004a4:	20000144 	.word	0x20000144
 80004a8:	e000e010 	.word	0xe000e010

080004ac <delay>:
}

void delay(uint32_t time_ms)
{
  uint32_t n = getNumberTask();
  task[n].delay = 0;
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <delay+0x3c>)
 80004ae:	2100      	movs	r1, #0
{
  return 0; 
}

void delay(uint32_t time_ms)
{
 80004b0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n = getNumberTask();
  task[n].delay = 0;
 80004b2:	60d1      	str	r1, [r2, #12]
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80004b4:	b672      	cpsid	i
}

void addTimer(void (*callback)(), uint32_t timer, uint32_t timer_auto, uint8_t *tick)
{
  __disable_irq();
  uint8_t n = timer_new;
 80004b6:	4c0d      	ldr	r4, [pc, #52]	; (80004ec <delay+0x40>)
 80004b8:	7a23      	ldrb	r3, [r4, #8]
 80004ba:	b2db      	uxtb	r3, r3
  if (n<TMR)
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d80c      	bhi.n	80004da <delay+0x2e>
  {
    tmr[n].callback = callback;
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80004c0:	7a25      	ldrb	r5, [r4, #8]
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80004c2:	4f0b      	ldr	r7, [pc, #44]	; (80004f0 <delay+0x44>)
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80004c4:	3501      	adds	r5, #1
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80004c6:	011b      	lsls	r3, r3, #4
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80004c8:	b2ed      	uxtb	r5, r5
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80004ca:	18fe      	adds	r6, r7, r3
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
    timer_new++;
 80004cc:	7225      	strb	r5, [r4, #8]
  if (n<TMR)
  {
    tmr[n].callback = callback;
    tmr[n].timer = timer;
    tmr[n].timer_auto = timer_auto;
    tmr[n].tick = tick;
 80004ce:	f102 040c 	add.w	r4, r2, #12
{
  __disable_irq();
  uint8_t n = timer_new;
  if (n<TMR)
  {
    tmr[n].callback = callback;
 80004d2:	50f9      	str	r1, [r7, r3]
    tmr[n].timer = timer;
 80004d4:	6070      	str	r0, [r6, #4]
    tmr[n].timer_auto = timer_auto;
 80004d6:	60b1      	str	r1, [r6, #8]
    tmr[n].tick = tick;
 80004d8:	60f4      	str	r4, [r6, #12]


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80004da:	b662      	cpsie	i
void delay(uint32_t time_ms)
{
  uint32_t n = getNumberTask();
  task[n].delay = 0;
  addTimer(0,time_ms,0,(uint8_t*)&task[n].delay);
  while(!task[n].delay);
 80004dc:	68d3      	ldr	r3, [r2, #12]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0fc      	beq.n	80004dc <delay+0x30>
}
 80004e2:	bcf0      	pop	{r4, r5, r6, r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200000f4 	.word	0x200000f4
 80004ec:	200001bc 	.word	0x200001bc
 80004f0:	20000134 	.word	0x20000134

080004f4 <addTask>:

uint32_t addTask(void (*addr_task)())
{
 80004f4:	b570      	push	{r4, r5, r6, lr}
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80004f6:	b672      	cpsid	i
  __disable_irq();
  uint32_t n = task_new++;
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <addTask+0x3c>)
 80004fa:	7a54      	ldrb	r4, [r2, #9]
 80004fc:	b2e4      	uxtb	r4, r4
 80004fe:	1c63      	adds	r3, r4, #1
 8000500:	b2db      	uxtb	r3, r3
  if (n<TSK)
 8000502:	2c03      	cmp	r4, #3
}

uint32_t addTask(void (*addr_task)())
{
  __disable_irq();
  uint32_t n = task_new++;
 8000504:	7253      	strb	r3, [r2, #9]
  if (n<TSK)
 8000506:	d810      	bhi.n	800052a <addTask+0x36>
 8000508:	4602      	mov	r2, r0
  {
     uint32_t sp = (uint32_t)&__stack_top__ - (1<<POW_MSP) - (n<<POW_PSP);
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <addTask+0x40>)
     *((uint32_t*)sp - 1) = PSR_RESET_VALUE;
 800050c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
{
  __disable_irq();
  uint32_t n = task_new++;
  if (n<TSK)
  {
     uint32_t sp = (uint32_t)&__stack_top__ - (1<<POW_MSP) - (n<<POW_PSP);
 8000510:	eba3 2304 	sub.w	r3, r3, r4, lsl #8
     *((uint32_t*)sp - 1) = PSR_RESET_VALUE;
     *((uint32_t*)sp - 2) = (uint32_t)addr_task;
     *((uint32_t*)sp - 3) = LR_RESET_VALUE;;
 8000514:	f04f 35ff 	mov.w	r5, #4294967295
     __bzero((uint32_t*)sp - 8, 20);
 8000518:	f1a3 0020 	sub.w	r0, r3, #32
 800051c:	2114      	movs	r1, #20
  __disable_irq();
  uint32_t n = task_new++;
  if (n<TSK)
  {
     uint32_t sp = (uint32_t)&__stack_top__ - (1<<POW_MSP) - (n<<POW_PSP);
     *((uint32_t*)sp - 1) = PSR_RESET_VALUE;
 800051e:	e903 0044 	stmdb	r3, {r2, r6}
     *((uint32_t*)sp - 2) = (uint32_t)addr_task;
     *((uint32_t*)sp - 3) = LR_RESET_VALUE;;
 8000522:	f843 5c0c 	str.w	r5, [r3, #-12]
     __bzero((uint32_t*)sp - 8, 20);
 8000526:	f7ff fe29 	bl	800017c <__bzero>


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800052a:	b662      	cpsie	i
  }
  __enable_irq();
  return n;
}
 800052c:	4620      	mov	r0, r4
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	200001bc 	.word	0x200001bc
 8000534:	20004c00 	.word	0x20004c00

08000538 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SVC_Handler>:
//  SCB->ICSR  = SCB_ICSR_PENDSVCLR;
}

void SVC_Handler(void)
{
  __set_PSP(current_PSP);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <SVC_Handler+0x1c>)
  );
}

inline void __set_PSP(uint32_t value)
{
  __asm volatile
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f383 8809 	msr	PSP, r3

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 8000544:	f3bf 8f6f 	isb	sy
  );
}

inline void __set_BASEPRI(uint32_t value)
{
  __asm volatile
 8000548:	2300      	movs	r3, #0
 800054a:	f383 8811 	msr	BASEPRI, r3
  __ISB();
  __set_BASEPRI(0);
  __asm volatile
 800054e:	f04e 0e0d 	orr.w	lr, lr, #13
 8000552:	4770      	bx	lr
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200000f0 	.word	0x200000f0

0800055c <rtosStart>:
  );
}

void rtosStart(void)
{
  current_PSP = (uint32_t)&__stack_top__ - (1<<POW_MSP) - 32;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <rtosStart+0x28>)
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <rtosStart+0x2c>)
 8000560:	601a      	str	r2, [r3, #0]
  __asm volatile
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <rtosStart+0x20>)
 8000564:	6800      	ldr	r0, [r0, #0]
 8000566:	6800      	ldr	r0, [r0, #0]
 8000568:	f380 8808 	msr	MSP, r0
 800056c:	b662      	cpsie	i
 800056e:	b661      	cpsie	f
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	f3bf 8f6f 	isb	sy
 8000578:	df00      	svc	0
 800057a:	bf00      	nop
 800057c:	e000ed08 	.word	0xe000ed08
 8000580:	e7fe      	b.n	8000580 <rtosStart+0x24>
 8000582:	bf00      	nop
 8000584:	200000f0 	.word	0x200000f0
 8000588:	20004be0 	.word	0x20004be0

0800058c <SystemInit>:
#include "stm32f10x.h"
#include "sysinit.h"

void SystemInit (void) {
  /* Set RCC initial state */
  RCC->CR   = RCC_CR_RESET_STATE;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <SystemInit+0x58>)
  RCC->CFGR = 0;
 800058e:	2200      	movs	r2, #0
  RCC->CIR  = 0;
  /* Enable HSE */
  RCC->CR |= RCC_CR_HSEON;
  /* Wait till HSE is ready */
  while (!(RCC->CR & RCC_CR_HSERDY));
 8000590:	4619      	mov	r1, r3
#include "stm32f10x.h"
#include "sysinit.h"

void SystemInit (void) {
  /* Set RCC initial state */
  RCC->CR   = RCC_CR_RESET_STATE;
 8000592:	2083      	movs	r0, #131	; 0x83
 8000594:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;
 8000596:	605a      	str	r2, [r3, #4]
  RCC->CIR  = 0;
 8000598:	609a      	str	r2, [r3, #8]
  /* Enable HSE */
  RCC->CR |= RCC_CR_HSEON;
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005a0:	601a      	str	r2, [r3, #0]
  /* Wait till HSE is ready */
  while (!(RCC->CR & RCC_CR_HSERDY));
 80005a2:	680b      	ldr	r3, [r1, #0]
 80005a4:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <SystemInit+0x58>)
 80005a6:	0398      	lsls	r0, r3, #14
 80005a8:	d5fb      	bpl.n	80005a2 <SystemInit+0x16>
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1  | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_PPRE1_DIV2 |
               RCC_CFGR_PLLSRC_HSE | PLL_MUL;
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
  /* Wait till PLL is ready */
  while(!(RCC->CR & RCC_CR_PLLRDY));
 80005aa:	4611      	mov	r1, r2
  RCC->CR |= RCC_CR_HSEON;
  /* Wait till HSE is ready */
  while (!(RCC->CR & RCC_CR_HSERDY));
  /* Enable Prefetch Buffer, set Flash memory wait state */
#if SYSCLK > 48000000
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_2;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <SystemInit+0x5c>)
 80005ae:	2012      	movs	r0, #18
 80005b0:	6018      	str	r0, [r3, #0]
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
#else
  FLASH->ACR = FLASH_ACR_PRFTBE;
#endif
  /* HCLK = PCLK1 = PCLK2 = SYSCLK = HSE * PLL_MUL*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1  | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_PPRE1_DIV2 |
 80005b2:	6853      	ldr	r3, [r2, #4]
 80005b4:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80005b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005bc:	6053      	str	r3, [r2, #4]
               RCC_CFGR_PLLSRC_HSE | PLL_MUL;
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80005be:	6813      	ldr	r3, [r2, #0]
 80005c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c4:	6013      	str	r3, [r2, #0]
  /* Wait till PLL is ready */
  while(!(RCC->CR & RCC_CR_PLLRDY));
 80005c6:	680b      	ldr	r3, [r1, #0]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <SystemInit+0x58>)
 80005ca:	019b      	lsls	r3, r3, #6
 80005cc:	d5fb      	bpl.n	80005c6 <SystemInit+0x3a>
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 80005ce:	4611      	mov	r1, r2
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
  /* Wait till PLL is ready */
  while(!(RCC->CR & RCC_CR_PLLRDY));
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80005d0:	6853      	ldr	r3, [r2, #4]
 80005d2:	f043 0302 	orr.w	r3, r3, #2
 80005d6:	6053      	str	r3, [r2, #4]
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 80005d8:	684b      	ldr	r3, [r1, #4]
 80005da:	f003 030c 	and.w	r3, r3, #12
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d1fa      	bne.n	80005d8 <SystemInit+0x4c>
}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40022000 	.word	0x40022000

080005ec <usartInit>:
  USART1->DR = c;
}

  // --- UART setup ----
void usartInit(uint32_t baud) {
  USART1->BRR = SYSCLK / baud;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <usartInit+0x28>)
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <usartInit+0x2c>)
 80005f0:	fbb3 f0f0 	udiv	r0, r3, r0
 80005f4:	b280      	uxth	r0, r0
 80005f6:	8110      	strh	r0, [r2, #8]
  USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80005f8:	8a93      	ldrh	r3, [r2, #20]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000600:	8293      	strh	r3, [r2, #20]
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000602:	8993      	ldrh	r3, [r2, #12]
 8000604:	b29b      	uxth	r3, r3
 8000606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800060a:	f043 030c 	orr.w	r3, r3, #12
 800060e:	8193      	strh	r3, [r2, #12]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	044aa200 	.word	0x044aa200
 8000618:	40013800 	.word	0x40013800

0800061c <usartPrint>:
}

void usartPrint (char *s) {
 800061c:	b538      	push	{r3, r4, r5, lr}
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <usartPrint+0x34>)
  USART1->BRR = SYSCLK / baud;
  USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
}

void usartPrint (char *s) {
 8000620:	4605      	mov	r5, r0
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <usartPrint+0x38>)
 8000624:	6853      	ldr	r3, [r2, #4]
 8000626:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <usartPrint+0x34>)
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1fb      	bne.n	8000624 <usartPrint+0x8>
 800062c:	8801      	ldrh	r1, [r0, #0]
 800062e:	0609      	lsls	r1, r1, #24
 8000630:	d5f8      	bpl.n	8000624 <usartPrint+0x8>
  DMA1_Channel4->CCR = 0;
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <usartPrint+0x3c>)
  USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
}

void usartPrint (char *s) {
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
  DMA1_Channel4->CCR = 0;
 8000634:	6023      	str	r3, [r4, #0]
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
  DMA1_Channel4->CMAR = (uint32_t)s;
  DMA1_Channel4->CNDTR = __strlen(s);
 8000636:	4628      	mov	r0, r5
}

void usartPrint (char *s) {
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
  DMA1_Channel4->CCR = 0;
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
 8000638:	60a2      	str	r2, [r4, #8]
  DMA1_Channel4->CMAR = (uint32_t)s;
 800063a:	60e5      	str	r5, [r4, #12]
  DMA1_Channel4->CNDTR = __strlen(s);
 800063c:	f7ff fda8 	bl	8000190 <__strlen>
  DMA1_Channel4->CCR = DMA_CCR1_MINC | DMA_CCR1_DIR;
 8000640:	2390      	movs	r3, #144	; 0x90
void usartPrint (char *s) {
  while (DMA1_Channel4->CNDTR || !(USART1->SR & USART_SR_TXE));
  DMA1_Channel4->CCR = 0;
  DMA1_Channel4->CPAR = (uint32_t)(&USART1->DR);
  DMA1_Channel4->CMAR = (uint32_t)s;
  DMA1_Channel4->CNDTR = __strlen(s);
 8000642:	6060      	str	r0, [r4, #4]
  DMA1_Channel4->CCR = DMA_CCR1_MINC | DMA_CCR1_DIR;
 8000644:	6023      	str	r3, [r4, #0]
  DMA1_Channel4->CCR |= DMA_CCR1_EN;
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6023      	str	r3, [r4, #0]
 800064e:	bd38      	pop	{r3, r4, r5, pc}
 8000650:	40020044 	.word	0x40020044
 8000654:	40013800 	.word	0x40013800
 8000658:	40013804 	.word	0x40013804
